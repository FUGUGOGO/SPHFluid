//PGRTerrain: Procedural Generation and Rendering of Terrain
//DH2323 Course Project in KTH
//MarchingCube.compute
//Yang Zhou: yanzho@kth.se
//Yanbo Huang: yanboh@kth.se
//Huiting Wang: huitingw@kth.se
//2015.5

#pragma kernel MarchingCube

#define BLOCK_SIZE 8
#define SAMPLE_SIZE 9
#define INC_SAMPLE_SIZE 10
#define INC_SAMPLE_SIZE_2D 100
#define INC_SAMPLE_SIZE_3D 1000


struct Triangle
{
	float3 _position0;
	float3 _position1;
	float3 _position2;
	float3 _normal0;
	float3 _normal1;
	float3 _normal2;
	int _block;
};

StructuredBuffer<float> _Samples;
StructuredBuffer<float3> _Normals;

StructuredBuffer<uint> _CornerFlags;
StructuredBuffer<int> _CornerToVertTable;
StructuredBuffer<int> _CornerToEdgeTable;

RWBuffer<uint> _TriEndIndex;
RWStructuredBuffer<Triangle> _Meshes;

// edgeConnection lists the index of the endpoint vertices for each of the 12 edges of the cube
static int2 edgeConnection[12] =
{
    int2(0,1), int2(1,2), int2(2,3), int2(3,0), int2(4,5), int2(5,6), int2(6,7), int2(7,4), int2(0,4), int2(1,5), int2(2,6), int2(3,7)
};

// vertexOffset lists the positions, relative to vertex0, of each of the 8 vertices of a cube
static float3 vertexOffset[8] =
{
    float3(0, 0, 0), float3(1, 0, 0), float3(1, 1, 0), float3(0, 1, 0),
    float3(0, 0, 1), float3(1, 0, 1), float3(1, 1, 1), float3(0, 1, 1)
};

void FillCube(int blockIdx, uint3 cellIdx, out float cube[8])
{
	uint start = blockIdx * INC_SAMPLE_SIZE_3D + cellIdx.x + cellIdx.y * INC_SAMPLE_SIZE + cellIdx.z * INC_SAMPLE_SIZE * INC_SAMPLE_SIZE;

	//low
	cube[0] = _Samples[start];
	cube[1] = _Samples[start + 1];
	cube[2] = _Samples[start + 1 + INC_SAMPLE_SIZE];
	cube[3] = _Samples[start + INC_SAMPLE_SIZE];
	
	//up
	cube[4] = _Samples[start + INC_SAMPLE_SIZE*INC_SAMPLE_SIZE];
	cube[5] = _Samples[start + 1 + INC_SAMPLE_SIZE*INC_SAMPLE_SIZE];
	cube[6] = _Samples[start + 1 + INC_SAMPLE_SIZE + INC_SAMPLE_SIZE*INC_SAMPLE_SIZE];
	cube[7] = _Samples[start + INC_SAMPLE_SIZE + INC_SAMPLE_SIZE*INC_SAMPLE_SIZE];
}

float3 SampleNormalTrilinear(uint blockIdx, float3 coord)
{
	int3 coord0 = floor(coord);
	float3 t = coord - coord0;
	int3 coord1 = ceil(coord);
	uint blockStart = blockIdx * SAMPLE_SIZE * SAMPLE_SIZE * SAMPLE_SIZE;
	
	//c_"xyz"
	float3 c000 = _Normals[blockStart + coord0.x + coord0.y * SAMPLE_SIZE + coord0.z * SAMPLE_SIZE * SAMPLE_SIZE];		
	float3 c100 = _Normals[blockStart + coord1.x + coord0.y * SAMPLE_SIZE + coord0.z * SAMPLE_SIZE * SAMPLE_SIZE];
	float3 c010 = _Normals[blockStart + coord0.x + coord1.y * SAMPLE_SIZE + coord0.z * SAMPLE_SIZE * SAMPLE_SIZE];
	float3 c001 = _Normals[blockStart + coord0.x + coord0.y * SAMPLE_SIZE + coord1.z * SAMPLE_SIZE * SAMPLE_SIZE];

	float3 c110 = _Normals[blockStart + coord1.x + coord1.y * SAMPLE_SIZE + coord0.z * SAMPLE_SIZE * SAMPLE_SIZE];
	float3 c011 = _Normals[blockStart + coord0.x + coord1.y * SAMPLE_SIZE + coord1.z * SAMPLE_SIZE * SAMPLE_SIZE];
	float3 c101 = _Normals[blockStart + coord1.x + coord0.y * SAMPLE_SIZE + coord1.z * SAMPLE_SIZE * SAMPLE_SIZE];
	float3 c111 = _Normals[blockStart + coord1.x + coord1.y * SAMPLE_SIZE + coord1.z * SAMPLE_SIZE * SAMPLE_SIZE];

	//eliminate x dimension
	float3 c00 = lerp(c000,c100,t.x);
	float3 c10 = lerp(c010,c110,t.x);
	float3 c01 = lerp(c001,c101,t.x);
	float3 c11 = lerp(c011,c111,t.x);

	//eliminate y dimension
	float3 c0 = lerp(c00,c10,t.y);
	float3 c1 = lerp(c01,c11,t.y);

	//elimate z dimension
	return lerp(c0,c1,t.z);
}

[numthreads(BLOCK_SIZE,BLOCK_SIZE,BLOCK_SIZE)]
void MarchingCube (uint3 cellIdx : SV_GroupThreadID, uint3 groupId :SV_GroupID)
{

	uint blockIdx = groupId.x;
	int cornerFlag = _CornerFlags
							[
								blockIdx * BLOCK_SIZE*BLOCK_SIZE*BLOCK_SIZE +
								cellIdx.x +
								cellIdx.y * BLOCK_SIZE +
								cellIdx.z * BLOCK_SIZE * BLOCK_SIZE
							];

	int edgeFlag = _CornerToEdgeTable[cornerFlag];
	if(edgeFlag == 0)
		return;
	
	float cube[8];
	FillCube(blockIdx, cellIdx, cube);

	float3 meshVertices[12];
	float3 cellMin = float3(cellIdx.x, cellIdx.y, cellIdx.z);
	for(int e = 0; e < 12; e++)
	{
		//if there is an intersection on this edge
		if( (edgeFlag & (1 << e)) != 0)
		{
			//linear interpolation
			//get zero point
			float t = (/*0*/-cube[edgeConnection[e].x]) / (cube[edgeConnection[e].y] - cube[edgeConnection[e].x]);
			meshVertices[e] = lerp(cellMin + vertexOffset[edgeConnection[e].x],
									cellMin + vertexOffset[edgeConnection[e].y],
									t);
			
		}
	}


	for(int i = 0; i < 5; i++)
	{
		if(_CornerToVertTable[cornerFlag * 15 + i * 3] >= 0)
		{
			Triangle tri;
			tri._block = blockIdx;

			float3 curr;
			curr = meshVertices[_CornerToVertTable[cornerFlag * 15 + i * 3 + 0]];
			tri._position0 = curr;
			tri._normal0 = SampleNormalTrilinear(blockIdx, curr);

			curr = meshVertices[_CornerToVertTable[cornerFlag * 15 + i * 3 + 2]]; //note the winding order!!!!
			tri._position1 = curr;
			tri._normal1 = SampleNormalTrilinear(blockIdx, curr);

			curr = meshVertices[_CornerToVertTable[cornerFlag * 15 + i * 3 + 1]];
			tri._position2 = curr;
			tri._normal2 = SampleNormalTrilinear(blockIdx, curr);

			//add to the end of the list
			uint end;
			InterlockedAdd(_TriEndIndex[0],1,end);
			_Meshes[end] = tri;
		}
	}
}
