//PGRTerrain: Procedural Generation and Rendering of Terrain
//DH2323 Course Project in KTH
//CollectTriNum.compute
//Yang Zhou: yanzho@kth.se
//Yanbo Huang: yanboh@kth.se
//Huiting Wang: huitingw@kth.se
//2015.5

#pragma kernel CollectTriNum

#define BLOCK_SIZE 8
#define SAMPLE_SIZE 9
#define INC_SAMPLE_SIZE 10
#define INC_SAMPLE_SIZE_2D 100
#define INC_SAMPLE_SIZE_3D 1000

StructuredBuffer<float> _Samples;
StructuredBuffer<int> _CornerToTriNumTable;

RWBuffer<uint> _TriNum;
RWBuffer<uint> _CornerFlags;

void FillCube(int blockIdx, uint3 cellIdx, out float cube[8])
{
	uint start = blockIdx * INC_SAMPLE_SIZE_3D + cellIdx.x + cellIdx.y * INC_SAMPLE_SIZE + cellIdx.z * INC_SAMPLE_SIZE * INC_SAMPLE_SIZE;

	//low
	cube[0] = _Samples[start];
	cube[1] = _Samples[start + 1];
	cube[2] = _Samples[start + 1 + INC_SAMPLE_SIZE];
	cube[3] = _Samples[start + INC_SAMPLE_SIZE];
	
	//up
	cube[4] = _Samples[start + INC_SAMPLE_SIZE*INC_SAMPLE_SIZE];
	cube[5] = _Samples[start + 1 + INC_SAMPLE_SIZE*INC_SAMPLE_SIZE];
	cube[6] = _Samples[start + 1 + INC_SAMPLE_SIZE + INC_SAMPLE_SIZE*INC_SAMPLE_SIZE];
	cube[7] = _Samples[start + INC_SAMPLE_SIZE + INC_SAMPLE_SIZE*INC_SAMPLE_SIZE];
}


[numthreads(BLOCK_SIZE,BLOCK_SIZE,BLOCK_SIZE)]
void CollectTriNum (uint3 cellIdx : SV_GroupThreadID, uint3 groupId :SV_GroupID)
{
	uint blockIdx = groupId.x;
	float cube[8];
	FillCube(blockIdx, cellIdx, cube);

	int cornerFlag = 0;
	for(int i = 0; i < 8; i++)
		if(cube[i] > 0)
			cornerFlag = cornerFlag | (1 << i);

	int cellTriNum = _CornerToTriNumTable[cornerFlag];
	InterlockedAdd(_TriNum[0],cellTriNum);

	_CornerFlags
	[
		blockIdx * BLOCK_SIZE*BLOCK_SIZE*BLOCK_SIZE +
		cellIdx.x +
		cellIdx.y * BLOCK_SIZE +
		cellIdx.z * BLOCK_SIZE * BLOCK_SIZE
	] = cornerFlag;

}
